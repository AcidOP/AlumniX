datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  metadata      Metadata[]
  jobPostings   JobPosting[]
  event         Event[]

  verificationTokens VerificationToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  userId     String?  @db.ObjectId
  User       User?    @relation(fields: [userId], references: [id])

  @@unique([identifier, token])
}

model Metadata {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  graduationYear  Int?
  degree          String?
  major           String?
  jobTitle        String?
  companyName     String?
  linkedInProfile String?
  achievements    String?
  bio             String?
  address         String?
  phoneNumber     String?

  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobPosting {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  companyName     String
  location        String
  salaryRange     String?
  jobType         String
  applicationLink String
  postedAt        DateTime  @default(now())
  expiresAt       DateTime?
  updatedAt       DateTime  @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  location             String
  startTime            String
  date                 String
  registrationDeadline String?
  endTime              String
  eventLink            String?
  eventType            String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
